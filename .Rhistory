#
#   # hasn't finished yet
#   is.na(result),
#
#   # happening today
#   gameday == as.character(lubridate::today("US/Pacific"))
#
# ) %>%
dplyr::mutate(
# there's probably a better way to do this but it seems to work
current_hour = lubridate::hour(lubridate::now()),
current_minute = lubridate::minute(lubridate::now()),
game_hour = as.integer(substr(gametime, 1, 2)),
game_minute = as.integer(substr(gametime, 4, 5)),
# has already started
started = dplyr::case_when(
current_hour > game_hour ~ 1,
current_hour == game_hour & current_minute >= game_minute + 5 ~ 1,
TRUE ~ 0
),
#
espn = dplyr::case_when(
# hard code for playoff games not in Lee's file
game_id == "2021_19_LV_CIN"   ~ "401326627",
game_id == "2021_19_NE_BUF"   ~ "401326626",
game_id == "2021_19_PHI_TB"   ~ "401326630",
game_id == "2021_19_SF_DAL"   ~ "401326629",
game_id == "2021_19_PIT_KC"   ~ "401326628",
game_id == "2021_19_ARI_LA"   ~ "401326625",
TRUE ~ espn
)
) %>%
# dplyr::filter(started == 1) %>%
# dplyr::filter(grepl("2016", game_id, fixed = T)) %>%
dplyr::filter(espn == "401326626") %>%
dplyr::select(game_id, espn, home_team, away_team, week)
if (nrow(live_games) > 0) {
# # get all the 4th down functions here
# source('scripts/helpers.R')
# get list of old plays before we do anything
# read the file if it exists
old_plays <- readr::read_csv("data/old_plays.csv") %>%
mutate(game_id = as.character(game_id),
play_id = as.character(play_id))
# get updated plays from ongoing games
plays <- purrr::map_df(1 : nrow(live_games), function(x) {
message(glue::glue("{x}: game {live_games %>% dplyr::slice(x) %>% pull(espn)}"))
calculate_winprobs(espnscrapeR::get_nfl_pbp(live_games %>% dplyr::slice(x) %>% pull(espn)))
})
plays <- plays %>%
filter(scoring_play == 1 |
grepl("Interception", play_type, fixed = T) |
play_type == "Fumble Recovery (Opponent)" |
play_type == "Sack" |
(start_down == 4 & !grepl("Punt", play_type, fixed = T) &
play_type != "Penalty" & play_type != "End Period" & play_type != "Timeout" &
play_type != "End of Game" & play_type != "Two-minute warning"))
# save updated list of plays we've done
print(plays)
plays %>%
mutate(game_id = as.character(game_id)) %>%
select(game_id, play_id) %>%
mutate(old = 1) %>%
rbind(old_plays) %>%
distinct() %>%
readr::write_csv("data/old_plays.csv")
# get plays we haven't tweeted yet
for_tweeting <- plays %>%
mutate(game_id = as.character(game_id),
play_id = as.character(play_id)) %>%
left_join(old_plays, by = c("game_id","play_id")) %>%
filter(is.na(old))
# if there are plays to tweet, load the library and tweet
if (nrow(for_tweeting) > 0) {
suppressMessages(
library(rtweet)
)
# do the thing
for (x in 1:nrow(for_tweeting)) {
df <- for_tweeting %>% dplyr::slice(x)
play_desc <- df$play_desc %>% substr(1, 100)
posteam <- df$pos_team_abb
defteam <- if_else(df$pos_team_abb == df$home_team_abb, df$away_team_abb, df$home_team_abb)
wpa_direction <- ifelse(df$wpa > 0, "+", "")
home_team_price <- ifelse(df$home_wp < 0.5, 100/df$home_wp - 100, -100*df$home_wp/(1-df$home_wp))
away_team_price <- ifelse((1-df$home_wp) < 0.5, 100/(1-df$home_wp) - 100, -100*(1-df$home_wp)/(df$home_wp))
home_team_price <- ifelse(home_team_price > 0, paste0("+", round(home_team_price)), round(home_team_price))
away_team_price <- ifelse(away_team_price > 0, paste0("+", round(away_team_price)), round(away_team_price))
text <-
glue::glue("{df$away_team_abb} {df$away_score} @ {df$home_team_abb} {df$home_score}
{df$pos_team_abb} {df$start_text}
Q{df$quarter} {play_desc}
{df$home_team_abb} {round(df$home_wp*100, 1)}% ({home_team_price})
{df$away_team_abb} {100 - round(df$home_wp*100, 1)}% ({away_team_price})")
token <- rtweet::create_token(
app = "nflwinbot",  # the name of the Twitter app
consumer_key = Sys.getenv("TWITTER_CONSUMER_API_KEY"),
consumer_secret = Sys.getenv("TWITTER_CONSUMER_API_SECRET"),
access_token = Sys.getenv("TWITTER_ACCESS_TOKEN"),
access_secret = Sys.getenv("TWITTER_ACCESS_TOKEN_SECRET")
)
# Example: post a tweet via the API
# The keys will are in your environment thanks to create_token()
rtweet::post_tweet(text, token = token)
}
}
}
View(plays)
plays <- plays %>%
filter(scoring_play == 1 |
grepl("Interception", play_type, fixed = T) |
play_type == "Fumble Recovery (Opponent)" |
play_type == "Sack" |
(start_down == 4 & !grepl("Punt", play_type, fixed = T) &
play_type != "Penalty" & play_type != "End Period" & play_type != "Timeout" &
play_type != "End of Game" & play_type != "Two-minute warning"))
View(plays)
# get updated plays from ongoing games
plays <- purrr::map_df(1 : nrow(live_games), function(x) {
message(glue::glue("{x}: game {live_games %>% dplyr::slice(x) %>% pull(espn)}"))
calculate_winprobs(espnscrapeR::get_nfl_pbp(live_games %>% dplyr::slice(x) %>% pull(espn)))
})
plays <- plays %>%
filter(scoring_play == 1 |
grepl("Interception", play_type, fixed = T) |
play_type == "Fumble Recovery (Opponent)" |
play_type == "Sack" |
(start_down == 4 & !grepl("Punt", play_type, fixed = T) &
play_type != "Penalty" & play_type != "End Period" & play_type != "Timeout" &
play_type != "End of Game" & play_type != "Two-minute warning"))
View(plays)
plays %>%
mutate(game_id = as.character(game_id)) %>%
select(game_id, play_id) %>%
mutate(old = 1) %>%
rbind(old_plays) %>%
distinct() %>%
head(9) %>%
readr::write_csv("data/old_plays.csv")
plays %>%
mutate(game_id = as.character(game_id)) %>%
select(game_id, play_id) %>%
mutate(old = 1) %>%
rbind(old_plays) %>%
distinct() %>%
readr::write_csv("data/old_plays.csv")
setwd("~/Desktop/R/My Bot/nflwinbot")
plays %>%
mutate(game_id = as.character(game_id)) %>%
select(game_id, play_id) %>%
mutate(old = 1) %>%
rbind(old_plays) %>%
distinct() %>%
readr::write_csv("data/old_plays.csv")
plays %>%
mutate(game_id = as.character(game_id)) %>%
select(game_id, play_id) %>%
mutate(old = 1) %>%
rbind(old_plays) %>%
distinct() %>%
head(9) %>%
readr::write_csv("data/old_plays.csv")
View(plays)
plays %>%
mutate(game_id = as.character(game_id)) %>%
select(game_id, play_id) %>%
mutate(old = 1) %>%
rbind(old_plays) %>%
head(8) %>%
distinct() %>%
readr::write_csv("data/old_plays.csv")
# get updated plays from ongoing games
plays <- purrr::map_df(1 : nrow(live_games), function(x) {
message(glue::glue("{x}: game {live_games %>% dplyr::slice(x) %>% pull(espn)}"))
calculate_winprobs(espnscrapeR::get_nfl_pbp(live_games %>% dplyr::slice(x) %>% pull(espn)))
})
plays <- plays %>%
filter(scoring_play == 1 |
grepl("Interception", play_type, fixed = T) |
play_type == "Fumble Recovery (Opponent)" |
play_type == "Sack" |
(start_down == 4 & !grepl("Punt", play_type, fixed = T) &
play_type != "Penalty" & play_type != "End Period" & play_type != "Timeout" &
play_type != "End of Game" & play_type != "Two-minute warning"))
View(plays)
plays %>%
mutate(game_id = as.character(game_id)) %>%
select(game_id, play_id) %>%
mutate(old = 1) %>%
rbind(old_plays) %>%
distinct() %>%
head(9) %>%
readr::write_csv("data/old_plays.csv")
# get live games
live_games <- readRDS(url(
"http://www.habitatring.com/games_alt.rds"
)) %>%
# dplyr::filter(
#
#   # hasn't finished yet
#   is.na(result),
#
#   # happening today
#   gameday == as.character(lubridate::today("US/Pacific"))
#
# ) %>%
dplyr::mutate(
# there's probably a better way to do this but it seems to work
current_hour = lubridate::hour(lubridate::now()),
current_minute = lubridate::minute(lubridate::now()),
game_hour = as.integer(substr(gametime, 1, 2)),
game_minute = as.integer(substr(gametime, 4, 5)),
# has already started
started = dplyr::case_when(
current_hour > game_hour ~ 1,
current_hour == game_hour & current_minute >= game_minute + 5 ~ 1,
TRUE ~ 0
),
#
espn = dplyr::case_when(
# hard code for playoff games not in Lee's file
game_id == "2021_19_LV_CIN"   ~ "401326627",
game_id == "2021_19_NE_BUF"   ~ "401326626",
game_id == "2021_19_PHI_TB"   ~ "401326630",
game_id == "2021_19_SF_DAL"   ~ "401326629",
game_id == "2021_19_PIT_KC"   ~ "401326628",
game_id == "2021_19_ARI_LA"   ~ "401326625",
TRUE ~ espn
)
) %>%
# dplyr::filter(started == 1) %>%
# dplyr::filter(grepl("2016", game_id, fixed = T)) %>%
dplyr::filter(espn == "401326626") %>%
dplyr::select(game_id, espn, home_team, away_team, week)
# read the file if it exists
old_plays <- readr::read_csv("data/old_plays.csv") %>%
mutate(game_id = as.character(game_id),
play_id = as.character(play_id))
# get updated plays from ongoing games
plays <- purrr::map_df(1 : nrow(live_games), function(x) {
message(glue::glue("{x}: game {live_games %>% dplyr::slice(x) %>% pull(espn)}"))
calculate_winprobs(espnscrapeR::get_nfl_pbp(live_games %>% dplyr::slice(x) %>% pull(espn)))
})
plays <- plays %>%
filter(scoring_play == 1 |
grepl("Interception", play_type, fixed = T) |
play_type == "Fumble Recovery (Opponent)" |
play_type == "Sack" |
(start_down == 4 & !grepl("Punt", play_type, fixed = T) &
play_type != "Penalty" & play_type != "End Period" & play_type != "Timeout" &
play_type != "End of Game" & play_type != "Two-minute warning"))
View(plays)
# read the file if it exists
old_plays <- readr::read_csv("data/old_plays.csv") %>%
mutate(game_id = as.character(game_id),
play_id = as.character(play_id))
# get updated plays from ongoing games
plays <- purrr::map_df(1 : nrow(live_games), function(x) {
message(glue::glue("{x}: game {live_games %>% dplyr::slice(x) %>% pull(espn)}"))
calculate_winprobs(espnscrapeR::get_nfl_pbp(live_games %>% dplyr::slice(x) %>% pull(espn)))
})
plays <- plays %>%
filter(scoring_play == 1 |
grepl("Interception", play_type, fixed = T) |
play_type == "Fumble Recovery (Opponent)" |
play_type == "Sack" |
(start_down == 4 & !grepl("Punt", play_type, fixed = T) &
play_type != "Penalty" & play_type != "End Period" & play_type != "Timeout" &
play_type != "End of Game" & play_type != "Two-minute warning"))
pbp <- load_pbp(2021)
series_stats <- pbp %>%
filter(pass == 1 | rush == 1, week >= 15) %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
group_by(posteam) %>%
summarize(
n = n(),
ydsfromsticks = mean(ydsfromsticks, na.rm = T),
series_epa = mean(series_epa, na.rm = T),
conversion_rate = mean(series_success, na.rm = T)
)
library(nflreadr)
pbp <- load_pbp(2021)
series_stats %>%
filter(pass == 1 | rush == 1) %>%
select(series, down, ydstogo, ydsnet, yards_gained, desc, last_play, start_ep, end_ep, ep, series_epa) %>%
View()
series_stats <- pbp %>%
filter(pass == 1 | rush == 1, week >= 15) %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
group_by(posteam) %>%
summarize(
n = n(),
ydsfromsticks = mean(ydsfromsticks, na.rm = T),
series_epa = mean(series_epa, na.rm = T),
conversion_rate = mean(series_success, na.rm = T)
)
View(series_stats)
series_stats <- pbp %>%
filter(pass == 1 | rush == 1, week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
group_by(posteam) %>%
summarize(
n = n(),
ydsfromsticks = mean(ydsfromsticks, na.rm = T),
series_epa = mean(series_epa, na.rm = T),
conversion_rate = mean(series_success, na.rm = T)
)
View(series_stats)
series_stats <- pbp %>%
filter(pass == 1 | rush == 1, week >= 15, posteam != "JAC") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
group_by(posteam) %>%
summarize(
n = n(),
ydsfromsticks = mean(ydsfromsticks, na.rm = T),
series_epa = mean(series_epa, na.rm = T),
conversion_rate = mean(series_success, na.rm = T)
)
View(series_stats)
series_stats <- pbp %>%
filter(pass == 1 | rush == 1, week >= 15, posteam != "JAC") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
group_by(defteam) %>%
summarize(
n = n(),
ydsfromsticks = mean(ydsfromsticks, na.rm = T),
series_epa = mean(series_epa, na.rm = T),
conversion_rate = mean(series_success, na.rm = T)
)
View(series_stats)
series_stats <- pbp %>%
filter(pass == 1 | rush == 1, week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
group_by(defteam) %>%
summarize(
n = n(),
ydsfromsticks = mean(ydsfromsticks, na.rm = T),
series_epa = mean(series_epa, na.rm = T),
conversion_rate = mean(series_success, na.rm = T)
)
series_stats <- pbp %>%
filter(pass == 1 | rush == 1, week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
filter(defteam == "NE")
View(series_stats)
series_stats <- pbp %>%
filter(week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
filter(defteam == "NE")
series_stats <- pbp %>%
filter(week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
select(defteam, desc, play_type, series_success) %>%
filter(defteam == "NE")
series_stats <- pbp %>%
filter(play_type != "extra_point", week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
select(defteam, desc, play_type, series_success) %>%
filter(defteam == "NE")
series_stats <- pbp %>%
filter(pass == 1 | rush == 1, week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
select(defteam, desc, play_type, series_success) %>%
filter(defteam == "NE")
series_stats <- pbp %>%
filter(play_type != "extra_point", week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
select(defteam, desc, play_type, series_success) %>%
filter(defteam == "NE")
series_stats <- pbp %>%
filter(pass == 1 | rush == 1, week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
select(defteam, desc, play_type, series_success) %>%
filter(defteam == "NE")
series_stats <- pbp %>%
filter(play_type != "extra_point", play_type != "qb_kneel", week >= 15, posteam != "JAX") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
select(defteam, desc, play_type, series_success) %>%
filter(defteam == "NE")
pbp <- load_pbp(1999:2021)
series_stats <- pbp %>%
filter(play_type != "extra_point", play_type != "qb_kneel") %>%
group_by(defteam, game_id, series) %>%
mutate(last_play = ifelse(play_id == max(play_id), 1, 0),
first_play = ifelse(play_id == min(play_id), 1, 0),
start_ep = max(first_play*ep),
end_ep = max(last_play*ep),
series_epa = end_ep - start_ep + epa) %>%
ungroup() %>%
filter(last_play == 1) %>%
mutate(ydsfromsticks = yards_gained - ydstogo) %>%
group_by(defteam, game_id) %>%
summarize(
n = n(),
ydsfromsticks = mean(ydsfromsticks, na.rm = T),
series_epa = mean(series_epa, na.rm = T),
conversion_rate = mean(series_success, na.rm = T)
)
View(series_stats)
library(DBI)
